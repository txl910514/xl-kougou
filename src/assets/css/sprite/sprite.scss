// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$icon-back-name: 'icon_back';
$icon-back-x: 0px;
$icon-back-y: 0px;
$icon-back-offset-x: 0px;
$icon-back-offset-y: 0px;
$icon-back-width: 13px;
$icon-back-height: 11px;
$icon-back-total-width: 115px;
$icon-back-total-height: 127px;
$icon-back-image: '../assets/image/sprite/sprite.png';
$icon-back: (0px, 0px, 0px, 0px, 13px, 11px, 115px, 127px, '../assets/image/sprite/sprite.png', 'icon_back', );
$icon-set-name: 'icon_set';
$icon-set-x: 0px;
$icon-set-y: 11px;
$icon-set-offset-x: 0px;
$icon-set-offset-y: -11px;
$icon-set-width: 16px;
$icon-set-height: 16px;
$icon-set-total-width: 115px;
$icon-set-total-height: 127px;
$icon-set-image: '../assets/image/sprite/sprite.png';
$icon-set: (0px, 11px, 0px, -11px, 16px, 16px, 115px, 127px, '../assets/image/sprite/sprite.png', 'icon_set', );
$worker-icon-1-name: 'worker_icon_1';
$worker-icon-1-x: 0px;
$worker-icon-1-y: 27px;
$worker-icon-1-offset-x: 0px;
$worker-icon-1-offset-y: -27px;
$worker-icon-1-width: 22px;
$worker-icon-1-height: 22px;
$worker-icon-1-total-width: 115px;
$worker-icon-1-total-height: 127px;
$worker-icon-1-image: '../assets/image/sprite/sprite.png';
$worker-icon-1: (0px, 27px, 0px, -27px, 22px, 22px, 115px, 127px, '../assets/image/sprite/sprite.png', 'worker_icon_1', );
$worker-icon-2-name: 'worker_icon_2';
$worker-icon-2-x: 0px;
$worker-icon-2-y: 49px;
$worker-icon-2-offset-x: 0px;
$worker-icon-2-offset-y: -49px;
$worker-icon-2-width: 22px;
$worker-icon-2-height: 22px;
$worker-icon-2-total-width: 115px;
$worker-icon-2-total-height: 127px;
$worker-icon-2-image: '../assets/image/sprite/sprite.png';
$worker-icon-2: (0px, 49px, 0px, -49px, 22px, 22px, 115px, 127px, '../assets/image/sprite/sprite.png', 'worker_icon_2', );
$error-icon-name: 'error_icon';
$error-icon-x: 0px;
$error-icon-y: 71px;
$error-icon-offset-x: 0px;
$error-icon-offset-y: -71px;
$error-icon-width: 24px;
$error-icon-height: 24px;
$error-icon-total-width: 115px;
$error-icon-total-height: 127px;
$error-icon-image: '../assets/image/sprite/sprite.png';
$error-icon: (0px, 71px, 0px, -71px, 24px, 24px, 115px, 127px, '../assets/image/sprite/sprite.png', 'error_icon', );
$logo-name: 'logo';
$logo-x: 0px;
$logo-y: 95px;
$logo-offset-x: 0px;
$logo-offset-y: -95px;
$logo-width: 115px;
$logo-height: 32px;
$logo-total-width: 115px;
$logo-total-height: 127px;
$logo-image: '../assets/image/sprite/sprite.png';
$logo: (0px, 95px, 0px, -95px, 115px, 32px, 115px, 127px, '../assets/image/sprite/sprite.png', 'logo', );
$spritesheet-width: 115px;
$spritesheet-height: 127px;
$spritesheet-image: '../assets/image/sprite/sprite.png';
$spritesheet-sprites: ($icon-back, $icon-set, $worker-icon-1, $worker-icon-2, $error-icon, $logo, );
$spritesheet: (115px, 127px, '../assets/image/sprite/sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
